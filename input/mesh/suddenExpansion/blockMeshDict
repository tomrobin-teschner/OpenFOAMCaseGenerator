/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1812                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// We first need to calculate the development length of the entrance channel to
// ensure that our velocity profile is fully developed once it enters the
// sudden expansion. This is based on the work of
//
// F. Durst, S. Ray, B. Unsal, O. A. Bayoumi,
// "The Development Lengths of Laminar Pipe and Channel Flows",
// J. Fluids Eng., 127(6): 1154-1160, 2005
//
// We apply a safety factor to this development length to ensure the fully
// developed profile and to allow for the fact that it is not a pure channel
// flow which may interact with flow downstream (i.e. pressure waves) which may
// alter the development length of the flow.
// The development length is abreviated by L while the channel's diameter (2D)
// is expressed by D, to be consistent with the above quoted paper.

Re      80.0;
D       1.0;
L       #calc "$D * pow( pow(0.619, 1.6) + pow(0.0567 * $Re, 1.6), 1.0/1.6)";
Z       0.1;
safety  1.5;

// next we need to define the mesh resolution and grading towards the boundary
// edges. We define a base mesh with dx = dy = 0.1 D and then use a scaling
// factor to increase or decrease the mesh resolution. Furthermore, we apply
// the grading towards the boundaries which we apply uniformly in all
// directions.

mesh
{
    scaling         1.0;
    initSpacing     #calc "0.1 * $:D / $scaling";
    gradingX        5.0;
    gradingY        5.0;
}

// now we are able to define all our blocks. The following block structure is
// applied:
//
//                 |--------------------------------|
//                 |                4               |
//  |--------------|--------------------------------|
//  |       1      |                3               |
//  |--------------|--------------------------------|
//                 |                2               |
//                 |--------------------------------|
//
// Each block consists of 4 sub-blocks so that we can apply grading to all
// boundaries. The order is from left to right and from the bottom to the top.
// For example, block 1 is sub-divided into the following blocks
//
//  |-------------------------------|
//  |       1.3     |       1.4     |
//  |---------------|---------------|
//  |       1.1     |       1.2     |
//  |-------------------------------|
//
// This means that for each block we will have 18 vertices in total (9 on each
// side on the z-plane, of which we have two).

block1
{
    lx      #calc "$:L * $:safety";
    ly      $:D;
    lz      $:Z;
}

block2
{
    lx      #calc "$:Re / 5";
    ly      $:D;
    lz      $:Z;
}

block3
{
    lx      #calc "$:Re / 5";
    ly      $:D;
    lz      $:Z;
}

block4
{
    lx      #calc "$:Re / 5";
    ly      $:D;
    lz      $:Z;
}



vertices
(
    // block 1
    (#calc "-$:block1.lx"       #calc "-$:block1.ly / 2.0" #calc "-$:block1.lz / 2.0") // 0
    (#calc "-$:block1.lx / 2.0" #calc "-$:block1.ly / 2.0" #calc "-$:block1.lz / 2.0") // 1
    (0.0                        #calc "-$:block1.ly / 2.0" #calc "-$:block1.lz / 2.0") // 2

    (#calc "-$:block1.lx"       0.0                        #calc "-$:block1.lz / 2.0") // 3
    (#calc "-$:block1.lx / 2.0" 0.0                        #calc "-$:block1.lz / 2.0") // 4
    (0.0                        0.0                        #calc "-$:block1.lz / 2.0") // 5

    (#calc "-$:block1.lx"       #calc "$:block1.ly / 2.0"  #calc "-$:block1.lz / 2.0") // 6
    (#calc "-$:block1.lx / 2.0" #calc "$:block1.ly / 2.0"  #calc "-$:block1.lz / 2.0") // 7
    (0.0                        #calc "$:block1.ly / 2.0"  #calc "-$:block1.lz / 2.0") // 8

    (#calc "-$:block1.lx"       #calc "-$:block1.ly / 2.0" #calc "$:block1.lz / 2.0" ) // 9
    (#calc "-$:block1.lx / 2.0" #calc "-$:block1.ly / 2.0" #calc "$:block1.lz / 2.0" ) // 10
    (0.0                        #calc "-$:block1.ly / 2.0" #calc "$:block1.lz / 2.0" ) // 11

    (#calc "-$:block1.lx"       0.0                        #calc "$:block1.lz / 2.0" ) // 12
    (#calc "-$:block1.lx / 2.0" 0.0                        #calc "$:block1.lz / 2.0" ) // 13
    (0.0                        0.0                        #calc "$:block1.lz / 2.0" ) // 14

    (#calc "-$:block1.lx"       #calc "$:block1.ly / 2.0"  #calc "$:block1.lz / 2.0" ) // 15
    (#calc "-$:block1.lx / 2.0" #calc "$:block1.ly / 2.0"  #calc "$:block1.lz / 2.0" ) // 16
    (0.0                        #calc "$:block1.ly / 2.0"  #calc "$:block1.lz / 2.0" ) // 17

    // block 2
    (0.0                       #calc "-$:block2.ly - $:block2.ly / 2.0" #calc "-$:block2.lz / 2.0") // 18
    (#calc "$:block2.lx / 2.0" #calc "-$:block2.ly - $:block2.ly / 2.0" #calc "-$:block2.lz / 2.0") // 19
    (#calc "$:block2.lx"       #calc "-$:block2.ly - $:block2.ly / 2.0" #calc "-$:block2.lz / 2.0") // 20

    (0.0                       #calc "-$:block2.ly"                     #calc "-$:block2.lz / 2.0") // 21
    (#calc "$:block2.lx / 2.0" #calc "-$:block2.ly"                     #calc "-$:block2.lz / 2.0") // 22
    (#calc "$:block2.lx"       #calc "-$:block2.ly"                     #calc "-$:block2.lz / 2.0") // 23

    (#calc "$:block2.lx / 2.0" #calc "-$:block2.ly + $:block2.ly / 2.0" #calc "-$:block2.lz / 2.0") // 24
    (#calc "$:block2.lx"       #calc "-$:block2.ly + $:block2.ly / 2.0" #calc "-$:block2.lz / 2.0") // 25

    (0.0                       #calc "-$:block2.ly - $:block2.ly / 2.0" #calc "$:block2.lz / 2.0" ) // 26
    (#calc "$:block2.lx / 2.0" #calc "-$:block2.ly - $:block2.ly / 2.0" #calc "$:block2.lz / 2.0" ) // 27
    (#calc "$:block2.lx"       #calc "-$:block2.ly - $:block2.ly / 2.0" #calc "$:block2.lz / 2.0" ) // 28

    (0.0                       #calc "-$:block2.ly"                     #calc "$:block2.lz / 2.0" ) // 29
    (#calc "$:block2.lx / 2.0" #calc "-$:block2.ly"                     #calc "$:block2.lz / 2.0" ) // 30
    (#calc "$:block2.lx"       #calc "-$:block2.ly"                     #calc "$:block2.lz / 2.0" ) // 31

    (#calc "$:block2.lx / 2.0" #calc "-$:block2.ly + $:block2.ly / 2.0" #calc "$:block2.lz / 2.0" ) // 32
    (#calc "$:block2.lx"       #calc "-$:block2.ly + $:block2.ly / 2.0" #calc "$:block2.lz / 2.0" ) // 33

    // block 3
    (#calc "$:block3.lx / 2.0" 0.0                                      #calc "-$:block3.lz / 2.0") // 34
    (#calc "$:block3.lx"       0.0                                      #calc "-$:block3.lz / 2.0") // 35
    (#calc "$:block3.lx / 2.0" #calc "$:block3.ly / 2.0"                #calc "-$:block3.lz / 2.0") // 36
    (#calc "$:block3.lx"       #calc "$:block3.ly / 2.0"                #calc "-$:block3.lz / 2.0") // 37

    (#calc "$:block3.lx / 2.0" 0.0                                      #calc "$:block3.lz / 2.0" ) // 38
    (#calc "$:block3.lx"       0.0                                      #calc "$:block3.lz / 2.0" ) // 39
    (#calc "$:block3.lx / 2.0" #calc "$:block3.ly / 2.0"                #calc "$:block3.lz / 2.0" ) // 40
    (#calc "$:block3.lx"       #calc "$:block3.ly / 2.0"                #calc "$:block3.lz / 2.0" ) // 41

    // block 4
    (0.0                       #calc "$:block4.ly"                     #calc "-$:block4.lz / 2.0") // 42
    (#calc "$:block4.lx / 2.0" #calc "$:block4.ly"                     #calc "-$:block4.lz / 2.0") // 43
    (#calc "$:block4.lx"       #calc "$:block4.ly"                     #calc "-$:block4.lz / 2.0") // 44

    (0.0                       #calc "$:block4.ly + $:block4.ly / 2.0" #calc "-$:block4.lz / 2.0") // 45
    (#calc "$:block4.lx / 2.0" #calc "$:block4.ly + $:block4.ly / 2.0" #calc "-$:block4.lz / 2.0") // 46
    (#calc "$:block4.lx"       #calc "$:block4.ly + $:block4.ly / 2.0" #calc "-$:block4.lz / 2.0") // 47

    (0.0                       #calc "$:block4.ly"                     #calc "$:block4.lz / 2.0" ) // 48
    (#calc "$:block4.lx / 2.0" #calc "$:block4.ly"                     #calc "$:block4.lz / 2.0" ) // 49
    (#calc "$:block4.lx"       #calc "$:block4.ly"                     #calc "$:block4.lz / 2.0" ) // 50

    (0.0                       #calc "$:block4.ly + $:block4.ly / 2.0" #calc "$:block4.lz / 2.0" ) // 51
    (#calc "$:block4.lx / 2.0" #calc "$:block4.ly + $:block4.ly / 2.0" #calc "$:block4.lz / 2.0" ) // 52
    (#calc "$:block4.lx"       #calc "$:block4.ly + $:block4.ly / 2.0" #calc "$:block4.lz / 2.0" ) // 53

);

blocks
(
    // block 1.1
        hex (0  1  4  3  9  10 13 12)
        (
            #calc "floor($:block1.lx / $:mesh.initSpacing)"
            #calc "floor($:block1.ly / $:mesh.initSpacing)"
            1
        )
        simpleGrading
        (
            #calc "$:mesh.gradingX"
            #calc "$:mesh.gradingY"
            1
        )
    // block 1.2
        hex (1  2  5  4  10 11 14 13)
        (
            #calc "floor($:block1.lx / $:mesh.initSpacing)"
            #calc "floor($:block1.ly / $:mesh.initSpacing)"
            1
        )
        simpleGrading
        (
            #calc "1.0 / $:mesh.gradingX"
            #calc "$:mesh.gradingY"
            1
        )
    // block 1.3
        hex (3  4  7  6  12 13 16 15)
        (
            #calc "floor($:block1.lx / $:mesh.initSpacing)"
            #calc "floor($:block1.ly / $:mesh.initSpacing)"
            1
        )
        simpleGrading
        (
            #calc "$:mesh.gradingX"
            #calc "1.0 / $:mesh.gradingY"
            1
        )
    // block 1.4
        hex (4  5  8  7  13 14 17 16)
        (
            #calc "floor($:block1.lx / $:mesh.initSpacing)"
            #calc "floor($:block1.ly / $:mesh.initSpacing)"
            1
        )
        simpleGrading
        (
            #calc "1.0 / $:mesh.gradingX"
            #calc "1.0 / $:mesh.gradingY"
            1
        )
    // block 2.1
        hex (18 19 22 21 26 27 30 29)
        (
            #calc "floor($:block2.lx / $:mesh.initSpacing)"
            #calc "floor($:block2.ly / $:mesh.initSpacing)"
            1
        )
        simpleGrading
        (
            #calc "$:mesh.gradingX"
            #calc "$:mesh.gradingY"
            1
        )
    // block 2.2
        hex (19 20 23 22 27 28 31 30)
        (
            #calc "floor($:block2.lx / $:mesh.initSpacing)"
            #calc "floor($:block2.ly / $:mesh.initSpacing)"
            1
        )
        simpleGrading
        (
            #calc "1.0 / $:mesh.gradingX"
            #calc "$:mesh.gradingY"
            1
        )
    // block 2.3
        hex (21 22 24 2 29 30 32 11)
        (
            #calc "floor($:block2.lx / $:mesh.initSpacing)"
            #calc "floor($:block2.ly / $:mesh.initSpacing)"
            1
        )
        simpleGrading
        (
            #calc "$:mesh.gradingX"
            #calc "1.0 / $:mesh.gradingY"
            1
        )
    // block 2.4
        hex (22 23 25 24 30 31 33 32)
        (
            #calc "floor($:block2.lx / $:mesh.initSpacing)"
            #calc "floor($:block2.ly / $:mesh.initSpacing)"
            1
        )
        simpleGrading
        (
            #calc "1.0 / $:mesh.gradingX"
            #calc "1.0 / $:mesh.gradingY"
            1
        )
    // block 3.1
        hex (2 24 34 5 11 32 38 14)
        (
            #calc "floor($:block3.lx / $:mesh.initSpacing)"
            #calc "floor($:block3.ly / $:mesh.initSpacing)"
            1
        )
        simpleGrading
        (
            #calc "$:mesh.gradingX"
            #calc "$:mesh.gradingY"
            1
        )
    // block 3.2
        hex (24 25 35 34 32 33 39 38)
        (
            #calc "floor($:block3.lx / $:mesh.initSpacing)"
            #calc "floor($:block3.ly / $:mesh.initSpacing)"
            1
        )
        simpleGrading
        (
            #calc "1.0 / $:mesh.gradingX"
            #calc "$:mesh.gradingY"
            1
        )
    // block 3.3
        hex (5 34 36 8 14 38 40 17)
        (
            #calc "floor($:block3.lx / $:mesh.initSpacing)"
            #calc "floor($:block3.ly / $:mesh.initSpacing)"
            1
        )
        simpleGrading
        (
            #calc "$:mesh.gradingX"
            #calc "1.0 / $:mesh.gradingY"
            1
        )
    // block 3.4
        hex (34 35 37 36 38 39 41 40)
        (
            #calc "floor($:block3.lx / $:mesh.initSpacing)"
            #calc "floor($:block3.ly / $:mesh.initSpacing)"
            1
        )
        simpleGrading
        (
            #calc "1.0 / $:mesh.gradingX"
            #calc "1.0 / $:mesh.gradingY"
            1
        )
    // block 4.1
        hex (8 36 43 42 17 40 49 48)
        (
            #calc "floor($:block4.lx / $:mesh.initSpacing)"
            #calc "floor($:block4.ly / $:mesh.initSpacing)"
            1
        )
        simpleGrading
        (
            #calc "$:mesh.gradingX"
            #calc "$:mesh.gradingY"
            1
        )
    // block 4.2
        hex (36 37 44 43 40 41 50 49)
        (
            #calc "floor($:block4.lx / $:mesh.initSpacing)"
            #calc "floor($:block4.ly / $:mesh.initSpacing)"
            1
        )
        simpleGrading
        (
            #calc "1.0 / $:mesh.gradingX"
            #calc "$:mesh.gradingY"
            1
        )
    // block 4.3
        hex (42 43 46 45 48 49 52 51)
        (
            #calc "floor($:block4.lx / $:mesh.initSpacing)"
            #calc "floor($:block4.ly / $:mesh.initSpacing)"
            1
        )
        simpleGrading
        (
            #calc "$:mesh.gradingX"
            #calc "1.0 / $:mesh.gradingY"
            1
        )
    // block 4.4
        hex (43 44 47 46 49 50 53 52)
        (
            #calc "floor($:block4.lx / $:mesh.initSpacing)"
            #calc "floor($:block4.ly / $:mesh.initSpacing)"
            1
        )
        simpleGrading
        (
            #calc "1.0 / $:mesh.gradingX"
            #calc "1.0 / $:mesh.gradingY"
            1
        )
);

edges
(
);

boundary
(
    inlet
    {
        type patch;
        faces
        (
            (0 3 12 9)
            (3 6 15 12)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (23 20 28 31)
            (25 23 31 33)
            (35 25 33 39)
            (37 35 39 41)
            (44 37 41 50)
            (47 44 50 53)
        );
    }
    channelAndStep
    {
        type wall;
        faces
        (
            (10 1 0 9)
            (11 2 1 10)
            (7 16 15 6)
            (8 17 16 7)
            (18 21 29 26)
            (21 2 11 29)
            (8 42 48 17)
            (42 45 51 48)
        );
    }
    bottom
    {
        type wall;
        faces
        (
            (27 19 18 26)
            (28 20 19 27)
        );
    }
    top
    {
        type wall;
        faces
        (
            (46 52 51 45)
            (47 53 52 46)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
